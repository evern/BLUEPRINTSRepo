using BluePrints.BluePrintsEntitiesDataModel;
using BluePrints.Common;
using BluePrints.Common.ViewModel.Reporting;
using BluePrints.Data.Attributes;
using BluePrints.Data.Helpers;
using BluePrints.P6EntitiesDataModel;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BluePrints.Data
{
    public class WORKPACK_DashboardInfo : ISupportSummaryCalculation
    {
        public WORKPACK_DashboardInfo()
        {

        }

        public WORKPACK_DashboardInfo(WORKPACK WORKPACK, PROJECTSummary SummaryObject)
        {
            DataUtils.ShallowCopy(this, WORKPACK, true);
            SummaryRollUp summaryManufacturer = new SummaryRollUp();

            if (SummaryObject != null)
            {
                ReportableObjectRollUp summaryBuilder = new ReportableObjectRollUp(PROJECTSummary.Create(), WORKPACK, SummaryObject);
                this.SummarizablePrincipal = (PROJECTSummary)summaryBuilder.SummaryObject;
                if (this.SummarizablePrincipal.ReportableObjects.Count() > 0)
                {
                    summaryManufacturer.Manufacture(summaryBuilder);
                }
            }
        }

        //public WORKPACK_DashboardInfo(WORKPACK WORKPACK, IQueryable<PROGRESS_ITEMInfo> PROGRESS_ITEMInfos_byLivePROGRESS, bool IsGetModifiedWORKPACK_ASSIGNMENTS)
        //{
        //    DataUtils.ShallowCopy(this, WORKPACK, true);
        //    this.IsGetModifiedWORKPACK_ASSIGNMENTS = IsGetModifiedWORKPACK_ASSIGNMENTS;
        //    this.WORKPACK_ASSIGNMENTS = this.WORKPACK_ASSIGNMENTS.OrderBy(x => x.PRIORITY).ToList();

        //    SummaryManufacturer summaryManufacturer = new SummaryManufacturer();
        //    this.SummarizablePrincipal = DefaultSummaryCalculation.Create();
        //    this.SummarizablePrincipal.ReportableObjects = PROGRESS_ITEMInfos_byLivePROGRESS.Where(x => x.BASELINE_ITEM.GUID_WORKPACK == this.GUID).ToArray().AsEnumerable();
        //}

        public WORKPACK_DashboardInfo(WORKPACK WORKPACK)
        {
            DataUtils.ShallowCopy(this, WORKPACK, true);
        }

        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        public Guid GUID { get; set; }

        [Required]
        [FilterValueAttribute]
        public Guid GUID_PROJECT { get; set; }

        public Guid? GUID_DPHASE { get; set; }

        [Required]
        public Guid GUID_DAREA { get; set; }

        [Required]
        public Guid GUID_DDOCTYPE { get; set; }

        [Required]
        public Guid GUID_DDEPARTMENT { get; set; }

        [Required]
        public Guid GUID_DDISCIPLINE { get; set; }

        [Required]
        [StringLength(200)]
        public string INTERNAL_NAME1 { get; set; }

        [StringLength(200)]
        public string INTERNAL_NAME2 { get; set; }

        public DateTime STARTDATE { get; set; }

        public DateTime ENDDATE { get; set; }

        public DateTime REVIEWSTARTDATE { get; set; }

        public DateTime REVIEWENDDATE { get; set; }

        public DateTime? FORECASTSTARTDATE { get; set; }

        public DateTime? FORECASTENDDATE { get; set; }

        public bool AUTOGENERATED { get; set; }

        public DateTime CREATED { get; set; }

        public Guid CREATEDBY { get; set; }

        public DateTime? UPDATED { get; set; }

        public Guid? UPDATEDBY { get; set; }

        public DateTime? DELETED { get; set; }

        public Guid? DELETEDBY { get; set; }

        public virtual PHASE PHASE { get; set; }

        public virtual AREA AREA { get; set; }

        public virtual DEPARTMENT DEPARTMENT { get; set; }

        public virtual DISCIPLINE DISCIPLINE { get; set; }

        public virtual DOCTYPE DOCTYPE { get; set; }

        [FilterNameAttribute]
        public virtual PROJECT PROJECT { get; set; }
        public PROJECTSummary SummarizablePrincipal { get; set; }
        bool IsGetModifiedWORKPACK_ASSIGNMENTS { get; set; }
        public virtual ICollection<WORKPACK_ASSIGNMENT> WORKPACK_ASSIGNMENTS { get; set; }

        public ICollection<WORKPACK_ASSIGNMENT> ObservableWORKPACK_ASSIGNMENTS
        {
            get
            {
                return WORKPACK_ASSIGNMENTS.Where(x => x.ISMODIFIEDBASELINE == IsGetModifiedWORKPACK_ASSIGNMENTS).ToList();
            }
        }

        public virtual ICollection<BASELINE_ITEM> BASELINE_ITEMS { get; set; }

        public decimal ASSIGNED_UNITS
        {
            get { return ObservableWORKPACK_ASSIGNMENTS.Sum(x => (x.HIGH_VALUE - x.LOW_VALUE) + 1); }
        }
    }
}
